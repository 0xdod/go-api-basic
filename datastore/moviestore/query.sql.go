// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package moviestore

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgconn"
)

const createMovie = `-- name: CreateMovie :execresult
INSERT INTO movie (movie_id, extl_id, title, rated, released, run_time, director, writer,
                   create_app_id, create_user_id, create_timestamp, update_app_id, update_user_id, update_timestamp)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
`

type CreateMovieParams struct {
	MovieID         uuid.UUID
	ExtlID          string
	Title           string
	Rated           sql.NullString
	Released        sql.NullTime
	RunTime         sql.NullInt32
	Director        sql.NullString
	Writer          sql.NullString
	CreateAppID     uuid.UUID
	CreateUserID    uuid.NullUUID
	CreateTimestamp time.Time
	UpdateAppID     uuid.UUID
	UpdateUserID    uuid.NullUUID
	UpdateTimestamp time.Time
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createMovie,
		arg.MovieID,
		arg.ExtlID,
		arg.Title,
		arg.Rated,
		arg.Released,
		arg.RunTime,
		arg.Director,
		arg.Writer,
		arg.CreateAppID,
		arg.CreateUserID,
		arg.CreateTimestamp,
		arg.UpdateAppID,
		arg.UpdateUserID,
		arg.UpdateTimestamp,
	)
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE FROM movie
WHERE movie_id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, movieID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMovie, movieID)
	return err
}

const findMovieByExternalID = `-- name: FindMovieByExternalID :one
SELECT movie_id, extl_id, title, rated, released, run_time, director, writer, create_app_id, create_user_id, create_timestamp, update_app_id, update_user_id, update_timestamp FROM movie
WHERE extl_id = $1
`

func (q *Queries) FindMovieByExternalID(ctx context.Context, extlID string) (Movie, error) {
	row := q.db.QueryRow(ctx, findMovieByExternalID, extlID)
	var i Movie
	err := row.Scan(
		&i.MovieID,
		&i.ExtlID,
		&i.Title,
		&i.Rated,
		&i.Released,
		&i.RunTime,
		&i.Director,
		&i.Writer,
		&i.CreateAppID,
		&i.CreateUserID,
		&i.CreateTimestamp,
		&i.UpdateAppID,
		&i.UpdateUserID,
		&i.UpdateTimestamp,
	)
	return i, err
}

const findMovies = `-- name: FindMovies :many
SELECT movie_id, extl_id, title, rated, released, run_time, director, writer, create_app_id, create_user_id, create_timestamp, update_app_id, update_user_id, update_timestamp FROM movie
`

func (q *Queries) FindMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.Query(ctx, findMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.MovieID,
			&i.ExtlID,
			&i.Title,
			&i.Rated,
			&i.Released,
			&i.RunTime,
			&i.Director,
			&i.Writer,
			&i.CreateAppID,
			&i.CreateUserID,
			&i.CreateTimestamp,
			&i.UpdateAppID,
			&i.UpdateUserID,
			&i.UpdateTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :exec
UPDATE movie
SET title            = $1,
    rated            = $2,
    released         = $3,
    run_time         = $4,
    director         = $5,
    writer           = $6,
    update_app_id    = $7,
    update_user_id   = $8,
    update_timestamp = $9
WHERE movie_id = $10
`

type UpdateMovieParams struct {
	Title           string
	Rated           sql.NullString
	Released        sql.NullTime
	RunTime         sql.NullInt32
	Director        sql.NullString
	Writer          sql.NullString
	UpdateAppID     uuid.UUID
	UpdateUserID    uuid.NullUUID
	UpdateTimestamp time.Time
	MovieID         uuid.UUID
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) error {
	_, err := q.db.Exec(ctx, updateMovie,
		arg.Title,
		arg.Rated,
		arg.Released,
		arg.RunTime,
		arg.Director,
		arg.Writer,
		arg.UpdateAppID,
		arg.UpdateUserID,
		arg.UpdateTimestamp,
		arg.MovieID,
	)
	return err
}
