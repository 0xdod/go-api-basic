// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package appstore

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgconn"
)

const createApp = `-- name: CreateApp :execresult
INSERT INTO app (app_id, org_id, app_extl_id, app_name, app_description, create_app_id, create_user_id,
                 create_timestamp, update_app_id, update_user_id, update_timestamp)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type CreateAppParams struct {
	AppID           uuid.UUID
	OrgID           uuid.UUID
	AppExtlID       string
	AppName         string
	AppDescription  string
	CreateAppID     uuid.UUID
	CreateUserID    uuid.NullUUID
	CreateTimestamp time.Time
	UpdateAppID     uuid.UUID
	UpdateUserID    uuid.NullUUID
	UpdateTimestamp time.Time
}

func (q *Queries) CreateApp(ctx context.Context, arg CreateAppParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createApp,
		arg.AppID,
		arg.OrgID,
		arg.AppExtlID,
		arg.AppName,
		arg.AppDescription,
		arg.CreateAppID,
		arg.CreateUserID,
		arg.CreateTimestamp,
		arg.UpdateAppID,
		arg.UpdateUserID,
		arg.UpdateTimestamp,
	)
}

const createAppAPIKey = `-- name: CreateAppAPIKey :execresult
INSERT INTO app_api_key (api_key, app_id, deactv_date, create_app_id, create_user_id,
                         create_timestamp, update_app_id, update_user_id, update_timestamp)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateAppAPIKeyParams struct {
	ApiKey          string
	AppID           uuid.UUID
	DeactvDate      time.Time
	CreateAppID     uuid.UUID
	CreateUserID    uuid.NullUUID
	CreateTimestamp time.Time
	UpdateAppID     uuid.UUID
	UpdateUserID    uuid.NullUUID
	UpdateTimestamp time.Time
}

func (q *Queries) CreateAppAPIKey(ctx context.Context, arg CreateAppAPIKeyParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createAppAPIKey,
		arg.ApiKey,
		arg.AppID,
		arg.DeactvDate,
		arg.CreateAppID,
		arg.CreateUserID,
		arg.CreateTimestamp,
		arg.UpdateAppID,
		arg.UpdateUserID,
		arg.UpdateTimestamp,
	)
}

const deleteApp = `-- name: DeleteApp :exec
DELETE FROM app
WHERE app_id = $1
`

func (q *Queries) DeleteApp(ctx context.Context, appID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteApp, appID)
	return err
}

const findAPIKeysByAppID = `-- name: FindAPIKeysByAppID :many
SELECT api_key, app_id, deactv_date, create_app_id, create_user_id, create_timestamp, update_app_id, update_user_id, update_timestamp FROM app_api_key
WHERE app_id = $1
`

func (q *Queries) FindAPIKeysByAppID(ctx context.Context, appID uuid.UUID) ([]AppApiKey, error) {
	rows, err := q.db.Query(ctx, findAPIKeysByAppID, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppApiKey
	for rows.Next() {
		var i AppApiKey
		if err := rows.Scan(
			&i.ApiKey,
			&i.AppID,
			&i.DeactvDate,
			&i.CreateAppID,
			&i.CreateUserID,
			&i.CreateTimestamp,
			&i.UpdateAppID,
			&i.UpdateUserID,
			&i.UpdateTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAppAPIKeysByAppExtlID = `-- name: FindAppAPIKeysByAppExtlID :many
select a.app_id,
       a.app_extl_id,
       a.app_name,
       a.app_description,
       o.org_id,
       o.org_extl_id,
       o.org_name,
       o.org_description,
       aak.api_key,
       aak.deactv_date
from app a
         inner join org o on o.org_id = a.org_id
         inner join app_api_key aak on a.app_id = aak.app_id
where a.app_extl_id = $1
`

type FindAppAPIKeysByAppExtlIDRow struct {
	AppID          uuid.UUID
	AppExtlID      string
	AppName        string
	AppDescription string
	OrgID          uuid.UUID
	OrgExtlID      string
	OrgName        string
	OrgDescription string
	ApiKey         string
	DeactvDate     time.Time
}

func (q *Queries) FindAppAPIKeysByAppExtlID(ctx context.Context, appExtlID string) ([]FindAppAPIKeysByAppExtlIDRow, error) {
	rows, err := q.db.Query(ctx, findAppAPIKeysByAppExtlID, appExtlID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAppAPIKeysByAppExtlIDRow
	for rows.Next() {
		var i FindAppAPIKeysByAppExtlIDRow
		if err := rows.Scan(
			&i.AppID,
			&i.AppExtlID,
			&i.AppName,
			&i.AppDescription,
			&i.OrgID,
			&i.OrgExtlID,
			&i.OrgName,
			&i.OrgDescription,
			&i.ApiKey,
			&i.DeactvDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAppByExternalID = `-- name: FindAppByExternalID :one
SELECT app_id, org_id, app_extl_id, app_name, app_description, create_app_id, create_user_id, create_timestamp, update_app_id, update_user_id, update_timestamp FROM app
WHERE app_extl_id = $1 LIMIT 1
`

func (q *Queries) FindAppByExternalID(ctx context.Context, appExtlID string) (App, error) {
	row := q.db.QueryRow(ctx, findAppByExternalID, appExtlID)
	var i App
	err := row.Scan(
		&i.AppID,
		&i.OrgID,
		&i.AppExtlID,
		&i.AppName,
		&i.AppDescription,
		&i.CreateAppID,
		&i.CreateUserID,
		&i.CreateTimestamp,
		&i.UpdateAppID,
		&i.UpdateUserID,
		&i.UpdateTimestamp,
	)
	return i, err
}

const findAppByID = `-- name: FindAppByID :one
SELECT app_id, org_id, app_extl_id, app_name, app_description, create_app_id, create_user_id, create_timestamp, update_app_id, update_user_id, update_timestamp FROM app
WHERE app_id = $1 LIMIT 1
`

func (q *Queries) FindAppByID(ctx context.Context, appID uuid.UUID) (App, error) {
	row := q.db.QueryRow(ctx, findAppByID, appID)
	var i App
	err := row.Scan(
		&i.AppID,
		&i.OrgID,
		&i.AppExtlID,
		&i.AppName,
		&i.AppDescription,
		&i.CreateAppID,
		&i.CreateUserID,
		&i.CreateTimestamp,
		&i.UpdateAppID,
		&i.UpdateUserID,
		&i.UpdateTimestamp,
	)
	return i, err
}

const findAppByName = `-- name: FindAppByName :one
SELECT a.app_id, a.org_id, a.app_extl_id, a.app_name, a.app_description, a.create_app_id, a.create_user_id, a.create_timestamp, a.update_app_id, a.update_user_id, a.update_timestamp
FROM app a inner join org o on o.org_id = a.org_id
WHERE o.org_id = $1
  AND a.app_name = $2
`

type FindAppByNameParams struct {
	OrgID   uuid.UUID
	AppName string
}

func (q *Queries) FindAppByName(ctx context.Context, arg FindAppByNameParams) (App, error) {
	row := q.db.QueryRow(ctx, findAppByName, arg.OrgID, arg.AppName)
	var i App
	err := row.Scan(
		&i.AppID,
		&i.OrgID,
		&i.AppExtlID,
		&i.AppName,
		&i.AppDescription,
		&i.CreateAppID,
		&i.CreateUserID,
		&i.CreateTimestamp,
		&i.UpdateAppID,
		&i.UpdateUserID,
		&i.UpdateTimestamp,
	)
	return i, err
}

const findApps = `-- name: FindApps :many
SELECT app_id, org_id, app_extl_id, app_name, app_description, create_app_id, create_user_id, create_timestamp, update_app_id, update_user_id, update_timestamp FROM app
ORDER BY app_name
`

func (q *Queries) FindApps(ctx context.Context) ([]App, error) {
	rows, err := q.db.Query(ctx, findApps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []App
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.AppID,
			&i.OrgID,
			&i.AppExtlID,
			&i.AppName,
			&i.AppDescription,
			&i.CreateAppID,
			&i.CreateUserID,
			&i.CreateTimestamp,
			&i.UpdateAppID,
			&i.UpdateUserID,
			&i.UpdateTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
